// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScreeningExchange.Infrastructure.DataAccess;

#nullable disable

namespace ScreeningExchange.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241123032001_alterar-para-complexProperty")]
    partial class alterarparacomplexProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("screeningexchange")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScreeningExchange.Domain.Aggregates.QuestionsAggregate.BuildQuestion", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.ComplexProperty<Dictionary<string, object>>("Flows", "ScreeningExchange.Domain.Aggregates.QuestionsAggregate.BuildQuestion.Flows#List<FlowCollection>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Questions", "ScreeningExchange.Domain.Aggregates.QuestionsAggregate.BuildQuestion.Questions#List<QuestionCollection>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("BuildQuestion", "screeningexchange");
                });
#pragma warning restore 612, 618
        }
    }
}
